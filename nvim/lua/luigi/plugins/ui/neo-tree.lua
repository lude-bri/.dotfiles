return {
  -- "nvim-neo-tree/neo-tree.nvim",
  -- branch = "v3.x",
  -- requires = {
  --   "nvim-lua/plenary.nvim",
  --   "nvim-tree/nvim-web-devicons", -- not strictly required, but recommended
  --   "MunifTanjim/nui.nvim",
  --   "3rd/image.nvim",              -- Optional image support in preview window: See `# Preview Mode` for more information
  --   {
  --     's1n7ax/nvim-window-picker',
  --     version = '2.*',
  --     config = function()
  --       require 'window-picker'.setup({
  --         filter_rules = {
  --           include_current_win = false,
  --           autoselect_one = true,
  --           -- filter using buffer options
  --           bo = {
  --             -- if the file type is one of following, the window will be ignored
  --             filetype = { 'neo-tree', "neo-tree-popup", "notify" },
  --             -- if the buffer type is one of following, the window will be ignored
  --             buftype = { 'terminal', "quickfix" },
  --           },
  --         },
  --       })
  --     end,
  --   },
  -- },
  -- config = function()
  --   -- If you want icons for diagnostic errors, you'll need to define them somewhere:
  --   vim.fn.sign_define("DiagnosticSignError",
  --     { text = " ", texthl = "DiagnosticSignError" })
  --   vim.fn.sign_define("DiagnosticSignWarn",
  --     { text = " ", texthl = "DiagnosticSignWarn" })
  --   vim.fn.sign_define("DiagnosticSignInfo",
  --     { text = " ", texthl = "DiagnosticSignInfo" })
  --   vim.fn.sign_define("DiagnosticSignHint",
  --     { text = "󰌵", texthl = "DiagnosticSignHint" })
  --
  --   require("neo-tree").setup({
  --     -- If a user has a sources list it will replace this one.
  --     -- Only sources listed here will be loaded.
  --     -- You can also add an external source by adding it's name to this list.
  --     -- The name used here must be the same name you would use in a require() call.
  --     sources = {
  --       "filesystem",
  --       "buffers",
  --       "git_status",
  --       "document_symbols",
  --     },
  --     source_selector = {
  --       winbar = true,
  --       statusline = false
  --     },
  --     event_handlers = {
  --       {
  --         event = "neo_tree_buffer_enter",
  --         handler = function()
  --           vim.opt_local.number = true
  --           vim.opt_local.relativenumber = true
  --         end
  --       },
  --     },
  --     close_if_last_window = true, -- Close Neo-tree if it is the last window left in the tab
  --     popup_border_style = "rounded",
  --     enable_git_status = true,
  --     enable_diagnostics = true,
  --     open_files_do_not_replace_types = { "terminal", "trouble", "qf" }, -- when opening files, do not use windows containing these filetypes or buftypes
  --     sort_case_insensitive = true,                                      -- used when sorting files and directories in the tree
  --     sort_function = nil,                                               -- use a custom function for sorting files and directories in the tree
  --     -- sort_function = function (a,b)
  --     --       if a.type == b.type then
  --     --           return a.path > b.path
  --     --       else
  --     --           return a.type > b.type
  --     --       end
  --     --   end , -- this sorts files and directories descendantly
  --     default_component_configs = {
  --       container = {
  --         enable_character_fade = true
  --       },
  --       indent = {
  --         indent_size = 2,
  --         padding = 0, -- extra padding on left hand side
  --         -- indent guides
  --         with_markers = true,
  --         indent_marker = "│",
  --         last_indent_marker = "└",
  --         highlight = "NeoTreeIndentMarker",
  --         -- expander config, needed for nesting files
  --         with_expanders = nil, -- if nil and file nesting is enabled, will enable expanders
  --         expander_collapsed = "",
  --         expander_expanded = "",
  --         expander_highlight = "NeoTreeExpander",
  --       },
  --       icon = {
  --         folder_closed = "",
  --         folder_open = "",
  --         folder_empty = "󰜌",
  --         provider = function(icon, node, state) -- default icon provider utilizes nvim-web-devicons if available
  --           if node.type == "file" or node.type == "terminal" then
  --             local success, web_devicons = pcall(require, "nvim-web-devicons")
  --             local name = node.type == "terminal" and "terminal" or node.name
  --             if success then
  --               local devicon, hl = web_devicons.get_icon(name)
  --               icon.text = devicon or icon.text
  --               icon.highlight = hl or icon.highlight
  --             end
  --           end
  --         end,
  --         -- The next two settings are only a fallback, if you use nvim-web-devicons and configure default icons there
  --         -- then these will never be used.
  --         default = "*",
  --         highlight = "NeoTreeFileIcon"
  --       },
  --       modified = {
  --         symbol = "[+]",
  --         highlight = "NeoTreeModified",
  --       },
  --       name = {
  --         trailing_slash = true,
  --         use_git_status_colors = true,
  --         highlight = "NeoTreeFileName",
  --       },
  --       git_status = {
  --         symbols = {
  --           -- Change type
  --           added     = "", -- or "✚", but this is redundant info if you use git_status_colors on the name
  --           modified  = "", -- or "", but this is redundant info if you use git_status_colors on the name
  --           deleted   = "✖", -- this can only be used in the git_status source
  --           renamed   = "󰁕", -- this can only be used in the git_status source
  --           -- Status type
  --           untracked = "",
  --           ignored   = "",
  --           unstaged  = "󰄱",
  --           staged    = "",
  --           conflict  = "",
  --         }
  --       },
  --       -- If you don't want to use these columns, you can set `enabled = false` for each of them individually
  --       type = {
  --         enabled = false,
  --         required_width = 30, -- min width of window required to show this column
  --       },
  --       file_size = {
  --         enabled = true,
  --         required_width = 30, -- min width of window required to show this column
  --       },
  --       last_modified = {
  --         enabled = true,
  --         required_width = 60, -- min width of window required to show this column
  --       },
  --       created = {
  --         enabled = true,
  --         required_width = 80, -- min width of window required to show this column
  --       },
  --       symlink_target = {
  --         enabled = true,
  --       },
  --     },
  --     -- A list of functions, each representing a global custom command
  --     -- that will be available in all sources (if not overridden in `opts[source_name].commands`)
  --     -- see `:h neo-tree-custom-commands-global`
  --     commands = {},
  --
  --     window = {
  --       position = "left",
  --       width = 40,
  --       mapping_options = {
  --         noremap = true,
  --         nowait = true,
  --       },
  --       mappings = {
  --         ["<space>"] = {
  --           "toggle_node",
  --           nowait = false, -- disable `nowait` if you have existing combos starting with this char that you want to use
  --         },
  --         ["<2-LeftMouse>"] = "open",
  --         ["<cr>"] = "open",
  --         ["<esc>"] = "cancel", -- close preview or floating neo-tree window
  --         ["P"] = { "toggle_preview", config = { use_float = true, use_image_nvim = true } },
  --         -- Read `# Preview Mode` for more information
  --         ["l"] = "focus_preview",
  --         ["S"] = "open_split",
  --         ["s"] = "open_vsplit",
  --         -- ["S"] = "split_with_window_picker",
  --         -- ["s"] = "vsplit_with_window_picker",
  --         ["t"] = "open_tabnew",
  --         -- ["<cr>"] = "open_drop",
  --         -- ["t"] = "open_tab_drop",
  --         ["w"] = "open_with_window_picker",
  --         --["P"] = "toggle_preview", -- enter preview mode, which shows the current node without focusing
  --         ["C"] = "close_node",
  --         -- ['C'] = 'close_all_subnodes',
  --         ["z"] = "close_all_nodes",
  --         --["Z"] = "expand_all_nodes",
  --         ["a"] = {
  --           "add",
  --           -- this command supports BASH style brace expansion ("x{a,b,c}" -> xa,xb,xc). see `:h neo-tree-file-actions` for details
  --           -- some commands may take optional config options, see `:h neo-tree-mappings` for details
  --           config = {
  --             show_path = "none" -- "none", "relative", "absolute"
  --           }
  --         },
  --         ["A"] = "add_directory", -- also accepts the optional config.show_path option like "add". this also supports BASH style brace expansion.
  --         ["d"] = "delete",
  --         ["r"] = "rename",
  --         ["y"] = "copy_to_clipboard",
  --         ["x"] = "cut_to_clipboard",
  --         ["p"] = "paste_from_clipboard",
  --         ["c"] = "copy", -- takes text input for destination, also accepts the optional config.show_path option like "add":
  --         -- ["c"] = {
  --         --  "copy",
  --         --  config = {
  --         --    show_path = "none" -- "none", "relative", "absolute"
  --         --  }
  --         --}
  --         ["m"] = "move", -- takes text input for destination, also accepts the optional config.show_path option like "add".
  --         ["q"] = "close_window",
  --         ["R"] = "refresh",
  --         ["?"] = "show_help",
  --         ["<"] = "prev_source",
  --         [">"] = "next_source",
  --         ["i"] = "show_file_details",
  --       }
  --     },
  --     nesting_rules = {},
  --     filesystem = {
  --       filtered_items = {
  --         visible = false, -- when true, they will just be displayed differently than normal items
  --         hide_dotfiles = false,
  --         hide_gitignored = true,
  --         hide_hidden = true, -- only works on Windows for hidden files/directories
  --         hide_by_name = {
  --           --"node_modules"
  --         },
  --         hide_by_pattern = { -- uses glob style patterns
  --           --"*.meta",
  --           --"*/src/*/tsconfig.json",
  --         },
  --         always_show = { -- remains visible even if other settings would normally hide it
  --           --".gitignored",
  --         },
  --         always_show_by_pattern = { -- uses glob style patterns
  --           --".env*",
  --         },
  --         never_show = { -- remains hidden even if visible is toggled to true, this overrides always_show
  --           --".DS_Store",
  --           --"thumbs.db"
  --         },
  --         never_show_by_pattern = { -- uses glob style patterns
  --           --".null-ls_*",
  --         },
  --       },
  --       follow_current_file = {
  --         enabled = false,                      -- This will find and focus the file in the active buffer every time
  --         --               -- the current file is changed while the tree is open.
  --         leave_dirs_open = false,              -- `false` closes auto expanded dirs, such as with `:Neotree reveal`
  --       },
  --       group_empty_dirs = false,               -- when true, empty folders will be grouped together
  --       hijack_netrw_behavior = "open_default", -- netrw disabled, opening a directory opens neo-tree
  --       -- in whatever position is specified in window.position
  --       -- "open_current",  -- netrw disabled, opening a directory opens within the
  --       -- window like netrw would, regardless of window.position
  --       -- "disabled",    -- netrw left alone, neo-tree does not handle opening dirs
  --       use_libuv_file_watcher = true, -- This will use the OS level file watchers to detect changes
  --       -- instead of relying on nvim autocmd events.
  --       window = {
  --         mappings = {
  --           ["<bs>"] = "navigate_up",
  --           ["."] = "set_root",
  --           ["H"] = "toggle_hidden",
  --           ["/"] = "fuzzy_finder",
  --           ["D"] = "fuzzy_finder_directory",
  --           ["#"] = "fuzzy_sorter", -- fuzzy sorting using the fzy algorithm
  --           -- ["D"] = "fuzzy_sorter_directory",
  --           ["f"] = "filter_on_submit",
  --           ["<c-x>"] = "clear_filter",
  --           ["[g"] = "prev_git_modified",
  --           ["]g"] = "next_git_modified",
  --           ["o"] = { "show_help", nowait = false, config = { title = "Order by", prefix_key = "o" } },
  --           ["oc"] = { "order_by_created", nowait = false },
  --           ["od"] = { "order_by_diagnostics", nowait = false },
  --           ["og"] = { "order_by_git_status", nowait = false },
  --           ["om"] = { "order_by_modified", nowait = false },
  --           ["on"] = { "order_by_name", nowait = false },
  --           ["os"] = { "order_by_size", nowait = false },
  --           ["ot"] = { "order_by_type", nowait = false },
  --           ["P"] = { "toggle_preview", config = { use_float = false, use_image_nvim = true } },
  --           -- ['<key>'] = function(state) ... end,
  --         },
  --         fuzzy_finder_mappings = { -- define keymaps for filter popup window in fuzzy_finder_mode
  --           ["<down>"] = "move_cursor_down",
  --           ["<C-n>"] = "move_cursor_down",
  --           ["<up>"] = "move_cursor_up",
  --           ["<C-p>"] = "move_cursor_up",
  --           -- ['<key>'] = function(state, scroll_padding) ... end,
  --         },
  --       },
  --
  --       commands = {} -- Add a custom command or override a global one using the same function name
  --     },
  --     buffers = {
  --       follow_current_file = {
  --         enabled = true,          -- This will find and focus the file in the active buffer every time
  --         --              -- the current file is changed while the tree is open.
  --         leave_dirs_open = false, -- `false` closes auto expanded dirs, such as with `:Neotree reveal`
  --       },
  --       group_empty_dirs = true,   -- when true, empty folders will be grouped together
  --       show_unloaded = true,
  --       window = {
  --         mappings = {
  --           ["bd"] = "buffer_delete",
  --           ["<bs>"] = "navigate_up",
  --           ["."] = "set_root",
  --           ["o"] = { "show_help", nowait = false, config = { title = "Order by", prefix_key = "o" } },
  --           ["oc"] = { "order_by_created", nowait = false },
  --           ["od"] = { "order_by_diagnostics", nowait = false },
  --           ["om"] = { "order_by_modified", nowait = false },
  --           ["on"] = { "order_by_name", nowait = false },
  --           ["os"] = { "order_by_size", nowait = false },
  --           ["ot"] = { "order_by_type", nowait = false },
  --         }
  --       },
  --     },
  --     git_status = {
  --       window = {
  --         position = "float",
  --         mappings = {
  --           ["A"]  = "git_add_all",
  --           ["gu"] = "git_unstage_file",
  --           ["ga"] = "git_add_file",
  --           ["gr"] = "git_revert_file",
  --           ["gc"] = "git_commit",
  --           ["gp"] = "git_push",
  --           ["gg"] = "git_commit_and_push",
  --           ["o"]  = { "show_help", nowait = false, config = { title = "Order by", prefix_key = "o" } },
  --           ["oc"] = { "order_by_created", nowait = false },
  --           ["od"] = { "order_by_diagnostics", nowait = false },
  --           ["om"] = { "order_by_modified", nowait = false },
  --           ["on"] = { "order_by_name", nowait = false },
  --           ["os"] = { "order_by_size", nowait = false },
  --           ["ot"] = { "order_by_type", nowait = false },
  --         }
  --       }
  --     }
  --   })
  --   local keymap = vim.keymap
  --   -- vim.api.nvim_create_augroup("NeoCodeiumToggle", { clear = true })
  --   -- vim.api.nvim_create_autocmd("FileType", {
  --   --   group = "NeoCodeiumToggle",
  --   --   pattern = "neo-tree",
  --   --   callback = function()
  --   --     vim.cmd("NeoCodeium disable")
  --   --   end,
  --   -- })
  --   -- vim.api.nvim_create_autocmd("BufLeave", {
  --   --   group = "NeoCodeiumToggle",
  --   --   pattern = "*",
  --   --   callback = function()
  --   --     if vim.bo.filetype == "neo-tree" then
  --   --       vim.schedule(function()
  --   --         if vim.bo.filetype ~= "neo-tree" then
  --   --           vim.cmd("NeoCodeium enable")
  --   --         end
  --   --       end)
  --   --     end
  --   --   end,
  --   -- })
  --   vim.keymap.set('n', '\\', function()
  --     vim.cmd('Neotree reveal')
  --     -- vim.cmd('NeoCodeium disable')
  --   end, { noremap = true, silent = true })
  --   keymap.set("n", "<leader>e", ":Neotree toggle<cr>", { desc = "Toggle NeoTree " })
  --   keymap.set("n", "<leader>n", ":Neotree reveal<cr>", { desc = "Toggle NeoTree " })
  --   keymap.set("n", "<leader>gn", ":Neotree float git_status git_base=main<cr>", { desc = "Get Git Status NeoTree" })
  --   keymap.set("n", "<leader>ts", ":Neotree document_symbols<cr>", { desc = "Get Document Symbols NeoTree" })
  -- end
}
